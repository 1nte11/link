//print in order
class Foo {
 public:
  Foo() {
    firstDone.lock();
    secondDone.lock();
  }

  void first(function<void()> printFirst) {
    printFirst();
    firstDone.unlock();
  }

  void second(function<void()> printSecond) {
    firstDone.lock();
    printSecond();
    secondDone.unlock();
  }

  void third(function<void()> printThird) {
    secondDone.lock();
    printThird();
  }

 private:
  mutex firstDone;
  mutex secondDone;
};

//shuffle the array
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int>ans;
        int i = 0, j=n;
        while(i<n && j<(2*n))
        {
            ans.push_back(nums[i]);
            ans.push_back(nums[j]);
            i++;
            j++;
        }
        return ans; 
    }
};


//minimum av diff
class Solution {
public:
    int minimumAverageDifference(vector<int>& nums) {
        long sum=0,s=0;
         for(int j=0;j<nums.size();j++)
          {
              s+=nums[j];
          }
          long min=INT_MAX;
          int index=-1;
        for(int i=0;i<nums.size();i++)
        {
            long avg=0;
             sum+=nums[i];
             s-=nums[i];
            if(nums.size()-i-1>0)
            {
             avg=sum/(i+1)-s/(nums.size()-i-1);
             avg=abs(avg);
            }
            else{
                avg=abs(sum/(i+1));
            }
             if(avg<min)
             {
                 min=avg;
                 index=i;
             }
        }
        return index;
    }
};

// rotate func
class Solution {
public:
    int maxRotateFunction(vector<int>& nums)
    {
        int ans=INT_MIN;
        int n=nums.size();
        int sum=0;
        int s=0;
        for (int i=0;i<n;i++)
        {
            sum+=nums[i];
            s+=nums[i]*i;
        }
        for (int i=n-1;i>=0;i--)
        {
           s=s-(nums[i]*(n-1))+(sum-nums[i]);
           ans=max(ans,s);
        }
        return ans;
    }
};
// longest valid pharent
class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int>stk;
        stk.push(-1);
        int ans = 0;
        for(int i = 0 ; i < s.size();  i++)
        {
            if(s[i] == '(')
                stk.push(i);
            else
            {
                if(stk.size() == 1)
                    stk.top() = i;
                else
                {
                    stk.pop();
                    ans = max(ans , i - stk.top());
                }
            }
        }
        return ans;
    }
};
