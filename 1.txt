//print in order
class Foo {
 public:
  Foo() {
    firstDone.lock();
    secondDone.lock();
  }

  void first(function<void()> printFirst) {
    printFirst();
    firstDone.unlock();
  }

  void second(function<void()> printSecond) {
    firstDone.lock();
    printSecond();
    secondDone.unlock();
  }

  void third(function<void()> printThird) {
    secondDone.lock();
    printThird();
  }

 private:
  mutex firstDone;
  mutex secondDone;
};

//shuffle the array
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int>ans;
        int i = 0, j=n;
        while(i<n && j<(2*n))
        {
            ans.push_back(nums[i]);
            ans.push_back(nums[j]);
            i++;
            j++;
        }
        return ans; 
    }
};


//minimum av diff
class Solution {
public:
    int minimumAverageDifference(vector<int>& nums) {
        long sum=0,s=0;
         for(int j=0;j<nums.size();j++)
          {
              s+=nums[j];
          }
          long min=INT_MAX;
          int index=-1;
        for(int i=0;i<nums.size();i++)
        {
            long avg=0;
             sum+=nums[i];
             s-=nums[i];
            if(nums.size()-i-1>0)
            {
             avg=sum/(i+1)-s/(nums.size()-i-1);
             avg=abs(avg);
            }
            else{
                avg=abs(sum/(i+1));
            }
             if(avg<min)
             {
                 min=avg;
                 index=i;
             }
        }
        return index;
    }
};

// rotate func
class Solution {
public:
    int maxRotateFunction(vector<int>& nums)
    {
        int ans=INT_MIN;
        int n=nums.size();
        int sum=0;
        int s=0;
        for (int i=0;i<n;i++)
        {
            sum+=nums[i];
            s+=nums[i]*i;
        }
        for (int i=n-1;i>=0;i--)
        {
           s=s-(nums[i]*(n-1))+(sum-nums[i]);
           ans=max(ans,s);
        }
        return ans;
    }
};
// longest valid pharent
class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int>stk;
        stk.push(-1);
        int ans = 0;
        for(int i = 0 ; i < s.size();  i++)
        {
            if(s[i] == '(')
                stk.push(i);
            else
            {
                if(stk.size() == 1)
                    stk.top() = i;
                else
                {
                    stk.pop();
                    ans = max(ans , i - stk.top());
                }
            }
        }
        return ans;
    }
};
// nqueen

#include<bits/stdc++.h>
using namespace std;
int N;


// function for printing the solution
void printSol(vector<vector<int>>board)
{
for(int i = 0;i<N;i++){
	for(int j = 0;j<N;j++){
		cout<<board[i][j]<<" ";
	}
	cout<<"\n";
}
}

/* Optimized isSafe function
isSafe function to check if current row contains or current left diagonal or current right diagonal contains any queen or not if 
yes return false
else return true
*/

bool isSafe(int row ,int col ,vector<bool>rows , vector<bool>left_digonals ,vector<bool>Right_digonals)
{
	
if(rows[row] == true || left_digonals[row+col] == true || Right_digonals[col-row+N-1] == true){
	return false;
}

return true;
}

// Recursive function to solve N-queen Problem
bool solve(vector<vector<int>>& board ,int col ,vector<bool>rows , vector<bool>left_digonals ,vector<bool>Right_digonals)
{	 
	// base Case : If all Queens are placed 
	if(col>=N){
		return true;
	}

	/* Consider this Column and move in all rows one by one */
	for(int i = 0;i<N;i++)
	{
		if(isSafe(i,col,rows,left_digonals,Right_digonals) == true)
		{
			rows[i] = true;
			left_digonals[i+col] = true;
			Right_digonals[col-i+N-1] = true;
			board[i][col] = 1; // placing the Queen in board[i][col]
				
				/* recur to place rest of the queens */

			if(solve(board,col+1,rows,left_digonals,Right_digonals) == true){
				return true;
			}
				
			// Backtracking 
			rows[i] = false;
			left_digonals[i+col] = false;
			Right_digonals[col-i+N-1] = false;
			board[i][col] = 0; // removing the Queen from board[i][col]

		}
	}

		return false;
}


int main()
{
// Taking input from the user

cout<<"Enter the no of rows for the square Board : ";
cin>>N;


// board of size N*N
vector<vector<int>>board(N,vector<int>(N,0));


	// array to tell which rows are occupied
vector<bool>rows(N,false);		 

// arrays to tell which diagonals are occupied					 
vector<bool>left_digonals(2*N-1,false);
vector<bool>Right_digonals(2*N-1,false);


bool ans = solve(board , 0, rows,left_digonals,Right_digonals);

if(ans == true){

	// printing the solution Board
	printSol(board);
}
else{
	cout<<"Solution Does not Exist\n";
}
}
// This Code is Contributed by Parshant Rajput

// set
#include <bits/stdc++.h>
using namespace std;

set <pair<int,int>> st;
int arr[] = {1, -3, 2, 3, 6, -1};
int main(){
    for(int i=0; i < sizeof(arr)/sizeof(arr[0]); i++){
        for (int j=1; j< sizeof(arr)/sizeof(arr[0])-1; j++){
            if (arr[i] == -1 * arr[j]){
                st.insert({arr[i],arr[j]});
               
            }
        }
    }
    
    for(auto it=st.begin(); it!=st.end(); it++){
        cout << it -> first <<  " " << it -> second << endl;
    }
}


// substr
#include <iostream>
#include <unordered_set>

using namespace std;

int main() {
    string str = "abcabcbb"; // You can change the input string as needed
    int n = str.length();
    int maxLength = 0, i = 0, j = 0;
    unordered_set<char> charSet;

    while (i < n && j < n) {
        if (charSet.find(str[j]) == charSet.end()) {
            // If the character is not in the set, add it and update maxLength
            charSet.insert(str[j++]);
            maxLength = max(maxLength, j - i);
        } else {
            // If the character is in the set, remove the first character
            charSet.erase(str[i++]);
        }
    }

    cout << "Length " << maxLength << endl;

    return 0;
}
